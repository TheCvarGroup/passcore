name: Build Windows Release

on:
  push:
    tags:
      - 'v*'  # Triggers on version tags like v1.0.0
  workflow_dispatch:
    inputs:
      tag_name:
        description: 'Tag name to build (e.g., v1.1.7)'
        required: true
        default: 'v1.1.7'

jobs:
  build-windows:
    runs-on: windows-latest
    
    steps:
    - name: Debug tag info
      run: |
        echo "Tag: ${{ github.ref_name }}"
        echo "Ref: ${{ github.ref }}"
        echo "Event: ${{ github.event_name }}"
        echo "Input tag: ${{ github.event.inputs.tag_name }}"
    
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: 'src/Unosquare.PassCore.Web/ClientApp/package-lock.json'
        
    - name: Restore .NET dependencies
      run: dotnet restore
      
    - name: Build .NET solution
      run: dotnet build --configuration Release --no-restore
      
    - name: Install npm dependencies
      run: npm ci
      working-directory: src/Unosquare.PassCore.Web/ClientApp
      
    - name: Build frontend
      run: npm run build
      working-directory: src/Unosquare.PassCore.Web/ClientApp
      
    - name: Publish .NET application
      run: dotnet publish --configuration Release --no-build --output ./publish --self-contained false
      
    - name: Set version info
      run: |
        if ("${{ github.event_name }}" -eq "workflow_dispatch") {
          $version = "${{ github.event.inputs.tag_name }}"
        } else {
          $version = "${{ github.ref_name }}"
        }
        $buildDate = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
        echo "Version: $version" > version.txt
        echo "Build Date: $buildDate" >> version.txt
        echo "Build Environment: GitHub Actions" >> version.txt
        echo "TAG_NAME=$version" >> $env:GITHUB_ENV
        
    - name: Create release archive
      run: |
        Compress-Archive -Path "./publish/*" -DestinationPath "passcore-${{ env.TAG_NAME }}-windows.zip"
        
    - name: Upload release assets
      run: |
        gh release upload ${{ env.TAG_NAME }} passcore-${{ env.TAG_NAME }}-windows.zip
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
